/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Milestone 3 - Reflection
Full Name  : Arshnoor Kaur
Student ID#: 138345236
Email      : arshnoor-kaur
Section    : ZEE

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/



ANSWER 1) 
A)
length = 0;
for (i = 0; string[i] != '\0'; i++)
{
    length++;
}
The First Code Snippet in MS1 is for calculating the length of the string with the traditional method as written above. With the help of a string.h header file, I was able to use the inbuilt strlen() function to calculate the length of a string by passing the string as an argument into it.
B)
for (i = 0; validChar[i] != '\0'; i++)
 {
     if (value == validChar[i])
     {
         isValid = 1;
     }
 }
This is the Second Code Snippet I found in MS1. This Code Snippet is searching for a character named value in the string named validChar[]. In MS2, I replaced this code portion with the strchr() function by passing two arguments into it, the first being the array and the second being the character to be searched for. When I used the inbuilt functions from the string.h header file in my code, I found out that I was not only able to reduce redundancy in code but was also able to reduce the length of the code which in return enhanced the readability of my code and made it more presentable. Secondly, the code looks efficient with the use of inbuilt functions as they are made for the same purpose, that is to avoid writing repeatable portions of code again and again. Thirdly, it saved lots of my time, which would have been spent just writing long blocks of code. 




ANSWER 2) The two string functions are strcpy() and strncpy() which have been used in the milestone. The strcpy() function just does the copying from the start of a string until it reaches the null character in the string. But the strncpy() function provides the freedom to specify the number of characters we want to copy from the source to the destination. The syntactic difference between the two is: strcpy(char* destination, const char* source), whereas strncpy(char* destination, const char* source, size_t NumOfChar). The strncpy() function is more preferable because it provides the access to choose the specific number of characters one wants to copy. This solves two issues, firstly there is no fear of buffer overflow which can occur if the size of the source is bigger than destination. This problem arrises when we blindly copies a string from source to destination without caring about their sizes. This issue is largely solved by strncpy() function. Secondly, it assures efficiency in the program rather than making a generalized solution. 
The portion of the code where I have used strncpy() is desribed below with comments with individual strncpy() to catch esaily. In strncpy(phone->description, "CELL", PHONE_DESC_LEN) the destination is description which is pointed by phone, the source from where it needs to be copied from is "CELL", and the exact number of characters equal to PHONE_DESC_LEN should be copied whose value is 4 as a macro. This is how only 4 characters will be copied from CELL to the description of the Phone structure. As the size of PHONE_DESC_LEN is more than "TBD", PHONE_DESC_LEN is equal to 4, but the source contains 4 characters, the terminating character in destination would automatically be '\0'. If strcpy() would have been used, We could not have been able to specify the number of characters to be copied. 
switch (phoneDesc)
{
case 1:
    strncpy(phone->description, "CELL", PHONE_DESC_LEN);                  // strncpy() USED

    printf("Contact: %s\n", phone->description);

    clearInputBuffer();
    printf("Number : ");
    fgets(phoneNum, sizeof(phoneNum), stdin);
    strncpy(phone->number, phoneNum, PHONE_LEN);                         // strncpy() USED

    printf("\n");
    break;

case 2:
    strncpy(phone->description, "HOME", PHONE_DESC_LEN);                // strncpy() USED

    printf("Contact: %s\n", phone->description);

    clearInputBuffer();
    printf("Number : ");
    fgets(phoneNum, sizeof(phoneNum), stdin);
    strncpy(phone->number, phoneNum, PHONE_LEN);                       // strncpy() USED

    printf("\n");
    break;

case 3:
    strncpy(phone->description, "WORK", PHONE_DESC_LEN);              // strncpy() USED

    printf("Contact: %s\n", phone->description);

    clearInputBuffer();
    printf("Number : ");
    fgets(phoneNum, sizeof(phoneNum), stdin);
    strncpy(phone->number, phoneNum, PHONE_LEN);                     // strncpy() USED

    printf("\n");
    break;

case 4:
    strncpy(phone->description, "TBD", PHONE_DESC_LEN);              // strncpy() USED
    *phone->number = 0;

    break;

default:
    printf("Error:\n");
    break;
}




ANSWER 3) To keep the lists sorted, the sort() function is called whenever viewAppointmentSchedule() or viewAllAppointments() is called. In these functions, either the algorithm takes input from the user, or the appointment schedule needs to be displayed which should be in ascending order. Therefore as bubble sort is one of the ways to sort the data in ascending order, the sort() function is called and the bubble sort algorithm is executed. While doing the milestone, I encountered a problem while arranging the data so that it would look presentable to the viewer and also easily readable. This was only possible if regular sorting was done whenever new values entered the data, any value was deleted, or when the appointment schedule had to be presented with each updation. This could have only been done if the sort() function was regularly called while making any change to the appointment data or whenever displaying it. So, here where comes the bubble sort technique in use.
In the bubble sort technique, the array appoints[] is taken, and all the members of the array are uniformly converted into minutes, which were earlier in the format of year, month, day, hour, and minutes so that the comparison could be done easily. The nested loops help in comparing the individual members with each other. We start by traversing the array from one side in the first loop and taking the nested loop inside the first one to start traversing the array from the other side. These two arrays are the same in terms of values, just taken as two arrays to compare individual values with one another. The temporary variable helps in swapping the two values in ascending order. The logic applied in bubble sort is that the outer loop iterates from the first element to the second-last element since after each pass, the smallest element bubbles up to its correct position, so it is unnecessary to iterate over the last element as it is already sorted with respect to the other values. The logic for the inner loop is that we iterate the array from the other end similarly so that the elements are sorted in ascending order. Also, in the end, the values in the correct order are converted back to minutes, hours, days, months, and years to retrieve the original values.
I feel that bubble sort is one of the ways to get the ascending order of data, but because it will perform the same number of iterations each time to put the data elements in ascending order, even if the data is already sorted. So it will waste the memory and machine time. However, the understanding of its implementation is easier as pairwise comparisons are performed. So, it can be seen as a useful tool in comparing elements of a dataset.



















